\i securitySchema/000_preSecuritySchema.sql
begin;
BEGIN
--before running other Security Schema files
commit;
COMMIT
\i securitySchema/001_CreateSecurityProfile.sql
begin;
BEGIN
drop table if exists security_profile cascade;
psql:securitySchema/001_CreateSecurityProfile.sql:2: NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to constraint fk_security_user_2 on table security_user
drop cascades to constraint fk_security_profile_grant_2 on table security_profile_grant
drop cascades to view vw_profile_grant
drop cascades to view vw_user_grant
drop cascades to function security_profile_sq(text,text,text,text,text,integer,integer)
drop cascades to function security_profile_iq(text,text,text,text)
drop cascades to function security_profile_uq(text,text,text,integer,text,timestamp without time zone)
DROP TABLE
CREATE TABLE security_profile
(
  security_profile_id serial NOT NULL,
  profile_name text,
  last_update timestamp(3) without time zone,
  updated_by text,
  CONSTRAINT security_profile_pkey PRIMARY KEY (security_profile_id)
)
WITH (
  OIDS=FALSE
);
psql:securitySchema/001_CreateSecurityProfile.sql:13: NOTICE:  CREATE TABLE will create implicit sequence "security_profile_security_profile_id_seq" for serial column "security_profile.security_profile_id"
psql:securitySchema/001_CreateSecurityProfile.sql:13: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "security_profile_pkey" for table "security_profile"
CREATE TABLE
commit;
COMMIT
\i securitySchema/002_CreateSecurityUser.sql
begin;
BEGIN
DROP TABLE  if exists SECURITY_USER cascade;
psql:securitySchema/002_CreateSecurityUser.sql:2: NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to function initsession(text,text,text,text)
drop cascades to function initsession_onetime(text,text,text,text)
drop cascades to function security_user_sq(text,text,text,text,text,integer,integer)
drop cascades to function security_user_iq(text,text,text,text,text,integer,character,text)
drop cascades to function security_user_uq(text,text,text,integer,text,timestamp without time zone,integer,character,text)
drop cascades to function init_passwd_reset(text,text)
drop cascades to function init_lostuname(text,text)
DROP TABLE
CREATE TABLE security_user
( security_user_id serial,
  user_id text NOT NULL,
  last_update timestamp(3) without time zone,
  updated_by text,
  password_enc text,
  security_profile_id integer NOT NULL,
  session_id text,
  session_expire_dt timestamp(3) without time zone,
  active_yn character(1),
  email_addr text,
	pwd_reset_cd text,
  CONSTRAINT security_user_pkey PRIMARY KEY (security_user_id),
  CONSTRAINT fk_security_user_2 FOREIGN KEY (security_profile_id)
      REFERENCES security_profile (security_profile_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
psql:securitySchema/002_CreateSecurityUser.sql:22: NOTICE:  CREATE TABLE will create implicit sequence "security_user_security_user_id_seq" for serial column "security_user.security_user_id"
psql:securitySchema/002_CreateSecurityUser.sql:22: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "security_user_pkey" for table "security_user"
CREATE TABLE
commit;
COMMIT
\i securitySchema/003_CreateSecurityPrivilege.sql
begin;
BEGIN
drop TABLE if exists security_privilege cascade;
psql:securitySchema/003_CreateSecurityPrivilege.sql:2: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to constraint fk_securityprofilegrant_securityprivilege on table security_profile_grant
drop cascades to function security_privilege_sq(text,text,text,text,text,integer,integer)
DROP TABLE
CREATE TABLE security_privilege
(
  security_privilege_id int4 NOT NULL,
  priv_name text,
  description text,
  last_update timestamp(3) without time zone,
  updated_by text,
  CONSTRAINT security_privilege_pkey PRIMARY KEY (security_privilege_id)
)
WITH (
  OIDS=FALSE
);
psql:securitySchema/003_CreateSecurityPrivilege.sql:14: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "security_privilege_pkey" for table "security_privilege"
CREATE TABLE
commit;
COMMIT
\i securitySchema/004_CreateSecurityProfileGrant.sql
begin;
BEGIN
drop table if exists security_profile_grant cascade;
psql:securitySchema/004_CreateSecurityProfileGrant.sql:2: NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to function security_profile_grant_sq(text,text,text,text,text,integer,integer)
drop cascades to function security_profile_grant_iq(text,text,text,integer,integer)
drop cascades to function security_profile_grant_uq(text,text,text,integer,integer,integer,timestamp with time zone)
DROP TABLE
CREATE TABLE security_profile_grant
(
  security_profile_grant_id serial NOT NULL,
  security_privilege_id integer NOT NULL,
  security_profile_id integer NOT NULL,
  last_update timestamp(3) without time zone,
  updated_by text,
  CONSTRAINT security_profile_grant_pkey PRIMARY KEY (security_profile_grant_id),
  CONSTRAINT fk_security_profile_grant_2 FOREIGN KEY (security_profile_id)
      REFERENCES security_profile (security_profile_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_securityprofilegrant_securityprivilege FOREIGN KEY (security_privilege_id)
      REFERENCES security_privilege (security_privilege_id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
psql:securitySchema/004_CreateSecurityProfileGrant.sql:20: NOTICE:  CREATE TABLE will create implicit sequence "security_profile_grant_security_profile_grant_id_seq" for serial column "security_profile_grant.security_profile_grant_id"
psql:securitySchema/004_CreateSecurityProfileGrant.sql:20: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "security_profile_grant_pkey" for table "security_profile_grant"
CREATE TABLE
create unique index ndx_security_profile_grant on security_profile_grant (security_privilege_id, security_profile_id);
CREATE INDEX
commit;
COMMIT
\i securitySchema/005_CreateVw_ProfileGrant.sql
begin;
BEGIN
CREATE OR REPLACE VIEW vw_profile_grant AS 
 SELECT sp.security_profile_id, sp.profile_name, spriv.security_privilege_id, spriv.priv_name, spg.last_update
   FROM security_profile sp
   LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id
   LEFT JOIN security_privilege spriv ON spg.security_privilege_id = spriv.security_privilege_id;
CREATE VIEW
commit;
COMMIT
\i securitySchema/006_CreateVw_UserGrant.sql
begin;
BEGIN
CREATE OR REPLACE VIEW vw_user_grant AS 
 SELECT su.user_id, sp.profile_name, spriv.priv_name
   FROM security_user su
   LEFT JOIN security_profile sp ON su.security_profile_id = sp.security_profile_id
   LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id
   LEFT JOIN security_privilege spriv ON spg.security_privilege_id = spriv.security_privilege_id
  where su.active_yn ='Y';
CREATE VIEW
commit;
COMMIT
\i securitySchema/010_CreateSP_InitSession.sql
begin;
BEGIN
CREATE OR REPLACE FUNCTION initsession(checkauthdummyplaceholder text, userid_ text, sessiondummyplaceholder text, password_ text)
  RETURNS security_user AS
$BODY$
 Declare
	sessionId_  character varying;
	securityUser security_user;
 Begin
  sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer )
	|| to_hex(((random() * 1000)^3)::Integer )  || to_hex(((random() * 1000)^3)::Integer );
  update security_user 
  set session_id =sessionId_ , session_expire_dt = now()+ '20 min', pwd_reset_cd=''
  where user_id = userID_ 
    and password_enc = md5(password_);
  if found then
  select * into securityUser from security_user where user_id =  userID_;
    
  else 
    securityUser.user_id :='';
    securityUser.session_id='';
  end if;
  return securityUser ;
 End;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION initsession_onetime(checkauthdummyplaceholder text, userid_ text, sessiondummyplaceholder text, resetcode_ text)
  RETURNS security_user AS
$BODY$
 Declare
	sessionId_  character varying;
	securityUser security_user;
 Begin
  
  update security_user 
  set session_id =resetcode_, session_expire_dt = now()+ '20 min', pwd_reset_cd=''
  where user_id = userID_ 
    and pwd_reset_cd =resetcode_ ;
  if found then
  select * into securityUser from security_user where user_id =  userID_;
    
  else 
    securityUser.user_id :='';
    securityUser.session_id='';
  end if;
  return securityUser ;
 End;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
CREATE FUNCTION
commit;
COMMIT
\i securitySchema/011_CreateSP_IsSessionValid.sql
begin;
BEGIN
CREATE OR REPLACE FUNCTION issessionvalid(userid_ text, sessionid_ text)
  RETURNS text AS
$BODY$
Declare
    
Begin

  update security_user 
  set session_expire_dt = now() + '20 min'
  where user_id = userID_ 
    and session_id = sessionId_ and session_id is not null and session_id !='';
  if found then
    return 'Valid Session' ;
  else 
    raise exception 'Session Invalid -- Access Denied';
    --return 'Session Invalid -- Access Denied';
  end if;

End;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
CREATE FUNCTION
commit;
COMMIT
\i securitySchema/012_CreateSP_IsUserAuthorized.sql
begin;
BEGIN
CREATE OR REPLACE FUNCTION isuserauthorized(userid_ text, tran_ text)
  RETURNS boolean AS
$BODY$
Declare
  rowCount integer;
 Begin
   select count(*) into rowCount 
   from vw_user_grant 
   where  user_id =userId_ and priv_name = tran_;
   
   if rowCount <> 1 then
      raise exception 'ACCESS DENIED-- user is not authorized for this transaction';
   end if;
   return true;
 End;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
CREATE FUNCTION
commit;
COMMIT
\i securitySchema/020_CreateProc_CRUD_SecurityProfile.sql
-- Function: security_profile_sq(text, text, text, text, text, integer, integer)
-- DROP FUNCTION security_profile_sq(text, text, text, text, text, integer, integer);
CREATE OR REPLACE FUNCTION security_profile_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer)
  RETURNS SETOF security_profile AS
$BODY$
  Declare
   Begin
    if alreadyAuth_ <>'ALREADY_AUTH' then
    	perform isSessionValid( securityuserId_,sessionId_) ;
    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_PROFILE' );
    end if;
    return query execute 'select * from security_profile ' ||  buildSQLClauses(whereClause_,orderByClause_,rowLimit_,rowOffset_);  
  End;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;
CREATE FUNCTION
--ALTER FUNCTION security_profile_sq(text,  text, text, text, text, integer, integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_profile_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore;
--select * from security_profile_sq('ALREADY_AUTH',  'test', 'test', '','',-1,-1);
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function: security_profile_bypk(text, text, text ,integer)
-- DROP FUNCTION security_profile_pybk(text, text, text,integer);
--CREATE OR REPLACE FUNCTION security_profile_bypk(alreadyAuth_ text,  securityuserid_ text, sessionid_ text 
--,securityProfileId_ integer)
--  RETURNS security_profile AS
--$BODY$
--  Declare
--    result security_profile;
--  Begin
--    if alreadyAuth_ <>'ALREADY_AUTH' then
--    	perform isSessionValid( securityuserId_,sessionId_) ;
--    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_PROFILE' );
--    end if;
--security_profile_id, profile_name, last_update, updated_by
--     select * into result from security_profile where security_profile_id=securityProfileId_;
--     return result;
--  End;
--$BODY$
--  LANGUAGE 'plpgsql' VOLATILE
--  COST 100;
--ALTER FUNCTION security_profile_bypk(text,  text, text,integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_profile_bypk(text,  text, text,integer) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_iq(text, text, text ,text)
-- DROP FUNCTION security_profile_iq( text, text, text,text);
create or replace function security_profile_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,profileName_ text)
  returns security_profile as
$body$
  declare
    newrow security_profile;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_,'INSERT_SECURITY_PROFILE' );
    end if;


    insert into security_profile( profile_name,last_update,updated_by)  values ( profileName_, now(), securityuserid_) 
	returning * into newrow;
      return newrow;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_iq(text,  text, text ,text) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_iq(text,  text, text ,text) TO GROUP golfscore;
--select * from security_profile_iq('ALREADY_AUTH', 'test', 'test' , 'text', 'text' );
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_uq(text, text, text ,integer,text,timestamp)
-- DROP FUNCTION security_profile_uq(text, text, text ,integer,text,timestamp);
create or replace function security_profile_uq(alreadyauth_ text,  securityuserid_ text, sessionid_ text , securityProfileId_ integer, profileName_ text, lastUpdate_ timestamp)
  returns security_profile as
$body$
  declare
    updatedrow security_profile;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_, 'UPDATE_SECURITY_PROFILE' );
    end if;
	update security_profile set profile_name= profileName_ ,  last_update = now() , updated_by = securityuserid_	where security_profile_id=securityProfileId_   and   last_update = lastUpdate_
	returning * into updatedrow;

	if found then
	  return updatedrow;
	else 
	  raise exception 'Update Failed for SECURITY_PROFILE- The record may have been changed or deleted before the attempt.';
	end if;

  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_uq(text,  text, text ,integer,text,timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_uq(text, text, text ,integer,text,timestamp) TO GROUP golfscore;
--select * from security_profile_uq('ALREADY_AUTH', 'test', 'test' <security_profile_id> <last_update>, 'text', 'text');
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_dq(text, text ,integer, timestamp)
-- DROP FUNCTION security_profile_dq( text,  text ,integer, timestamp);
create or replace function security_profile_dq(alreadyauth_ text,  userid_ text, sessionid_ text ,securityProfileId_ integer, lastUpdate_ timestamp  )
  returns boolean as
$body$
  declare
    
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_PROFILE' );
    end if;
	delete from security_profile where security_profile_id=securityProfileId_  and last_update = lastUpdate_;

	if found then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_PROFILE- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_dqw(text, text, text)
-- DROP FUNCTION security_profile_dqw( text,text,text);
create or replace function security_profile_dqw(alreadyauth_ text,  userid_ text, sessionid_ text , whereClause_  text)
  returns boolean as
$body$
  declare
  rcnt int;  
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_PROFILE' );
    end if;
	execute  'delete from security_profile ' ||  buildSQLClauses(whereClause_,'',0,0)  ;
	GET DIAGNOSTICS rcnt = ROW_COUNT;
	if rcnt>0 then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_PROFILE- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
\i securitySchema/030_CreateProc_CRUD_SecurityPrivilege.sql 
-- Function: security_privilege_sq(text, text, text, text, text, integer, integer)
-- DROP FUNCTION security_privilege_sq(text, text, text, text, text, integer, integer);
CREATE OR REPLACE FUNCTION security_privilege_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer)
  RETURNS SETOF security_privilege AS
$BODY$
  Declare
   Begin
    if alreadyAuth_ <>'ALREADY_AUTH' then
    	perform isSessionValid( securityuserId_,sessionId_) ;
    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_PRIVILEGE' );
    end if;
    return query execute 'select * from security_privilege ' ||  buildSQLClauses(whereClause_,orderByClause_,rowLimit_,rowOffset_);  
  End;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;
CREATE FUNCTION
--ALTER FUNCTION security_privilege_sq(text,  text, text, text, text, integer, integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_privilege_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore;
--select * from security_privilege_sq('ALREADY_AUTH',  'test', 'test', '','',-1,-1);
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function: security_privilege_bypk(text, text, text ,integer)
-- DROP FUNCTION security_privilege_pybk(text, text, text,integer);
--CREATE OR REPLACE FUNCTION security_privilege_bypk(alreadyAuth_ text,  securityuserid_ text, sessionid_ text 
--,securityPrivilegeId_ integer)
--  RETURNS security_privilege AS
--$BODY$
--  Declare
--    result security_privilege;
--  Begin
--    if alreadyAuth_ <>'ALREADY_AUTH' then
--    	perform isSessionValid( securityuserId_,sessionId_) ;
--    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_PRIVILEGE' );
--    end if;
--security_privilege_id, priv_name, description, last_update, updated_by
--     select * into result from security_privilege where security_privilege_id=securityPrivilegeId_;
--     return result;
--  End;
--$BODY$
--  LANGUAGE 'plpgsql' VOLATILE
--  COST 100;
--ALTER FUNCTION security_privilege_bypk(text,  text, text,integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_privilege_bypk(text,  text, text,integer) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_privilege_iq(text, text, text ,integer,text,text)
-- DROP FUNCTION security_privilege_iq( text, text, text,integer,text,text);
/* wbmartin 2012-08-22 | select is only UI proc
create or replace function security_privilege_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,securityPrivilegeId_ integer,privName_ text,description_ text)
  returns security_privilege as
$body$
  declare
    newrow security_privilege;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_,'INSERT_SECURITY_PRIVILEGE' );
    end if;


    insert into security_privilege( security_privilege_id,priv_name,description,last_update,updated_by)  values ( securityPrivilegeId_,privName_,description_, now(), securityuserid_) 
	returning * into newrow;
      return newrow;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
	*/
--alter function security_privilege_iq(text,  text, text ,integer,text,text) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_privilege_iq(text,  text, text ,integer,text,text) TO GROUP golfscore;
--select * from security_privilege_iq('ALREADY_AUTH', 'test', 'test'  ,1, 'text', 'text', 'text' );
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_privilege_uq(text, text, text ,integer,text,text,timestamp)
-- DROP FUNCTION security_privilege_uq(text, text, text ,integer,text,text,timestamp);
/* wbmartin 2012-08-22 | select is only UI proc
create or replace function security_privilege_uq(alreadyauth_ text,  securityuserid_ text, sessionid_ text , securityPrivilegeId_ integer, privName_ text, description_ text, lastUpdate_ timestamp)
  returns security_privilege as
$body$
  declare
    updatedrow security_privilege;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_, 'UPDATE_SECURITY_PRIVILEGE' );
    end if;
	update security_privilege set priv_name= privName_ ,  description= description_ ,  last_update = now() , updated_by = securityuserid_	where security_privilege_id=securityPrivilegeId_   and   last_update = lastUpdate_
	returning * into updatedrow;

	if found then
	  return updatedrow;
	else 
	  raise exception 'Update Failed for SECURITY_PRIVILEGE- The record may have been changed or deleted before the attempt.';
	end if;

  end;
$body$
  language 'plpgsql' volatile
  cost 100;
	*/
--alter function security_privilege_uq(text,  text, text ,integer,text,text,timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_privilege_uq(text, text, text ,integer,text,text,timestamp) TO GROUP golfscore;
--select * from security_privilege_uq('ALREADY_AUTH', 'test', 'test', 'text' ,1 <last_update>, 'text', 'text');
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_privilege_dq(text, text ,integer, timestamp)
-- DROP FUNCTION security_privilege_dq( text,  text ,integer, timestamp);
/* wbmartin 2012-08-22 | select is only UI proc
create or replace function security_privilege_dq(alreadyauth_ text,  userid_ text, sessionid_ text ,securityPrivilegeId_ integer, lastUpdate_ timestamp  )
  returns boolean as
$body$
  declare
    
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_PRIVILEGE' );
    end if;
	delete from security_privilege where security_privilege_id=securityPrivilegeId_  and last_update = lastUpdate_;

	if found then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_PRIVILEGE- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
	*/
--alter function security_privilege_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_privilege_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_privilege_dqw(text, text, text)
-- DROP FUNCTION security_privilege_dqw( text,text,text);
/* wbmartin 2012-08-22 | select is only UI proc
create or replace function security_privilege_dqw(alreadyauth_ text,  userid_ text, sessionid_ text , whereClause_ text )
  returns boolean as
$body$
  declare
  rcnt int;  
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_PRIVILEGE' );
    end if;
	execute  'delete from security_privilege ' ||  buildSQLClauses(whereClause_,'',0,0)  ;
	GET DIAGNOSTICS rcnt = ROW_COUNT;
	if rcnt>0 then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_PRIVILEGE- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
	*/
--alter function security_privilege_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_privilege_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
\i securitySchema/040_CreateProc_CRUD_security_profile_grant.sql
-- Function: security_profile_grant_sq(text, text, text, text, text, integer, integer)
-- DROP FUNCTION security_profile_grant_sq(text, text, text, text, text, integer, integer);
CREATE OR REPLACE FUNCTION security_profile_grant_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer)
  RETURNS SETOF security_profile_grant AS
$BODY$
  Declare
   Begin
    if alreadyAuth_ <>'ALREADY_AUTH' then
    	perform isSessionValid( securityuserId_,sessionId_) ;
    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_PROFILE_GRANT' );
    end if;
    return query execute 'select * from security_profile_grant ' ||  buildSQLClauses(whereClause_,orderByClause_,rowLimit_,rowOffset_);  
  End;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;
CREATE FUNCTION
--ALTER FUNCTION security_profile_grant_sq(text,  text, text, text, text, integer, integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_profile_grant_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore;
--select * from security_profile_grant_sq('ALREADY_AUTH',  'test', 'test', '','',-1,-1);
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function: security_profile_grant_bypk(text, text, text ,integer)
-- DROP FUNCTION security_profile_grant_pybk(text, text, text,integer);
--CREATE OR REPLACE FUNCTION security_profile_grant_bypk(alreadyAuth_ text,  securityuserid_ text, sessionid_ text 
--,securityProfileGrantId_ integer)
--  RETURNS security_profile_grant AS
--$BODY$
--  Declare
--    result security_profile_grant;
--  Begin
--    if alreadyAuth_ <>'ALREADY_AUTH' then
--    	perform isSessionValid( securityuserId_,sessionId_) ;
--    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_PROFILE_GRANT' );
--    end if;
--security_profile_grant_id, security_privilege_id, security_profile_id, last_update, updated_by
--     select * into result from security_profile_grant where security_profile_grant_id=securityProfileGrantId_;
--     return result;
--  End;
--$BODY$
--  LANGUAGE 'plpgsql' VOLATILE
--  COST 100;
--ALTER FUNCTION security_profile_grant_bypk(text,  text, text,integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_profile_grant_bypk(text,  text, text,integer) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_grant_iq(text, text, text ,integer,integer)
-- DROP FUNCTION security_profile_grant_iq( text, text, text,integer,integer);
create or replace function security_profile_grant_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,securityPrivilegeId_ integer,securityProfileId_ integer)
  returns security_profile_grant as
$body$
  declare
    newrow security_profile_grant;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_,'INSERT_SECURITY_PROFILE_GRANT' );
    end if;


    insert into security_profile_grant( security_privilege_id,security_profile_id,last_update,updated_by)  values ( securityPrivilegeId_,securityProfileId_, now(), securityuserid_) 
	returning * into newrow;
      return newrow;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_grant_iq(text,  text, text ,integer,integer) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_grant_iq(text,  text, text ,integer,integer) TO GROUP golfscore;
--select * from security_profile_grant_iq('ALREADY_AUTH', 'test', 'test'  ,1 ,1, 'text' );
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_grant_uq(text, text, text ,integer,integer,integer,timestamp with time zone)
-- DROP FUNCTION security_profile_grant_uq(text, text, text ,integer,integer,integer,timestamp with time zone);
create or replace function security_profile_grant_uq(alreadyauth_ text,  securityuserid_ text, sessionid_ text , securityProfileGrantId_ integer, securityPrivilegeId_ integer, securityProfileId_ integer, lastUpdate_ timestamp with time zone)
  returns security_profile_grant as
$body$
  declare
    updatedrow security_profile_grant;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_, 'UPDATE_SECURITY_PROFILE_GRANT' );
    end if;
	update security_profile_grant set security_privilege_id= securityPrivilegeId_ ,  security_profile_id= securityProfileId_ ,  last_update = now() , updated_by = securityuserid_	where security_profile_grant_id=securityProfileGrantId_   and   last_update = lastUpdate_
	returning * into updatedrow;

	if found then
	  return updatedrow;
	else 
	  raise exception 'Update Failed for SECURITY_PROFILE_GRANT- The record may have been changed or deleted before the attempt.';
	end if;

  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_grant_uq(text,  text, text ,integer,integer,integer,timestamp with time zone) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_grant_uq(text, text, text ,integer,integer,integer,timestamp with time zone) TO GROUP golfscore;
--select * from security_profile_grant_uq('ALREADY_AUTH', 'test', 'test' ,1 ,1 <last_update> <security_profile_grant_id>, 'text');
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_grant_dq(text, text ,integer, timestamp)
-- DROP FUNCTION security_profile_grant_dq( text,  text ,integer, timestamp);
create or replace function security_profile_grant_dq(alreadyauth_ text,  userid_ text, sessionid_ text ,securityProfileGrantId_ integer, lastUpdate_ timestamp  )
  returns boolean as
$body$
  declare
    
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_PROFILE_GRANT' );
    end if;
	delete from security_profile_grant where security_profile_grant_id=securityProfileGrantId_  and last_update = lastUpdate_;

	if found then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_PROFILE_GRANT- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_grant_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_grant_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_profile_grant_dqw(text, text, text)
-- DROP FUNCTION security_profile_grant_dqw( text,text,text);
create or replace function security_profile_grant_dqw(alreadyauth_ text,  userid_ text, sessionid_ text , whereClause_ text )
  returns boolean as
$body$
  declare
  rcnt int;  
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_PROFILE_GRANT' );
    end if;
	execute  'delete from security_profile_grant ' ||  buildSQLClauses(whereClause_,'',0,0)  ;
	GET DIAGNOSTICS rcnt = ROW_COUNT;
	if rcnt>0 then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_PROFILE_GRANT- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_profile_grant_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_profile_grant_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
\i securitySchema/050_CreateProc_CRUD_security_user.sql
-- Function: security_user_sq(text, text, text, text, text, integer, integer)
-- DROP FUNCTION security_user_sq(text, text, text, text, text, integer, integer);
CREATE OR REPLACE FUNCTION security_user_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer)
  RETURNS SETOF security_user AS
$BODY$
  Declare
   Begin
    if alreadyAuth_ <>'ALREADY_AUTH' then
    	perform isSessionValid( securityuserId_,sessionId_) ;
    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_USER' );
    end if;
    return query execute 'select security_user_id, user_id, last_update, updated_by, ''''::text password_enc, security_profile_id, session_id, session_expire_dt, active_yn, email_addr, pwd_reset_cd from security_user ' ||  buildSQLClauses(whereClause_,orderByClause_,rowLimit_,rowOffset_);  
  End;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;
CREATE FUNCTION
--ALTER FUNCTION security_user_sq(text,  text, text, text, text, integer, integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_user_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore;
--select * from security_user_sq('ALREADY_AUTH',  'test', 'test', '','',-1,-1);
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function: security_user_bypk(text, text, text ,integer)
-- DROP FUNCTION security_user_pybk(text, text, text,integer);
--CREATE OR REPLACE FUNCTION security_user_bypk(alreadyAuth_ text,  securityuserid_ text, sessionid_ text 
--,securityUserId_ integer)
--  RETURNS security_user AS
--$BODY$
--  Declare
--    result security_user;
--  Begin
--    if alreadyAuth_ <>'ALREADY_AUTH' then
--    	perform isSessionValid( securityuserId_,sessionId_) ;
--    	perform isUserAuthorized( securityuserId_, 'SELECT_SECURITY_USER' );
--    end if;
--security_user_id, user_id, last_update, updated_by, password_enc, security_profile_id, session_id, session_expire_dt, active_yn
--     select * into result from security_user where security_user_id=securityUserId_;
--     return result;
--  End;
--$BODY$
--  LANGUAGE 'plpgsql' VOLATILE
--  COST 100;
--ALTER FUNCTION security_user_bypk(text,  text, text,integer) OWNER TO postgres;
--GRANT EXECUTE ON FUNCTION security_user_bypk(text,  text, text,integer) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_user_iq(text, text, text ,text,text,integer,text,timestamp,character)
-- DROP FUNCTION security_user_iq( text, text, text,text,text,integer,text,timestamp,character);
create or replace function security_user_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,userId_ text,passwordEnc_ text,securityProfileId_ integer,activeYn_ character, emailAddr_ text)
  returns security_user as
$body$
  declare
    newrow security_user;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( securityuserid_,sessionid_) ;
    	perform isuserauthorized( securityuserid_,'INSERT_SECURITY_USER' );
    end if;


    insert into security_user( user_id,last_update,updated_by,password_enc,security_profile_id,active_yn, email_addr)  values ( userId_, now(), securityuserid_,md5(passwordEnc_),securityProfileId_,activeYn_, emailAddr_) 
	returning * into newrow;
      return newrow;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_user_iq(text,  text, text ,text,text,integer,text,timestamp,character) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_user_iq(text,  text, text ,text,text,integer,text,timestamp,character) TO GROUP golfscore;
--select * from security_user_iq('ALREADY_AUTH', 'test', 'test' , 'text', 'text', 'text' ,1, 'text', 'text', 'text' );
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_user_uq(text, text, text ,integer,text,timestamp,text,integer,text,timestamp,character)
-- DROP FUNCTION security_user_uq(text, text, text ,integer,text,timestamp,text,integer,text,timestamp,character);
create or replace function security_user_uq(alreadyauth_ text,  actinguserid_ text, sessionid_ text , securityUserId_ integer, userId_ text, lastUpdate_ timestamp, securityProfileId_ integer,  activeYn_ character, emailAddr_ text) 
  returns security_user as
$body$
  declare
    updatedrow security_user;
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( actinguserid_,sessionid_) ;
    	perform isuserauthorized( actinguserid_, 'UPDATE_SECURITY_USER' );
    end if;
	update security_user set user_id= userId_ ,  last_update = now() , updated_by = actinguserid_,  security_profile_id= securityProfileId_ ,    active_yn= activeYn_ , email_addr=emailAddr_	where security_user_id=securityUserId_   and   last_update = lastUpdate_
	returning * into updatedrow;

	if found then
	  return updatedrow;
	else 
	  raise exception 'Update Failed for SECURITY_USER- The record may have been changed or deleted before the attempt.';
	end if;

  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_user_uq(text,  text, text ,integer,text,timestamp,text,integer,text,timestamp,character) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_user_uq(text, text, text ,integer,text,timestamp,text,integer,text,timestamp,character) TO GROUP golfscore;
--select * from security_user_uq('ALREADY_AUTH', 'test', 'test', 'text', 'text' <last_update>, 'text' ,1, 'text', 'text', 'text' <security_user_id>);
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_user_dq(text, text ,integer, timestamp)
-- DROP FUNCTION security_user_dq( text,  text ,integer, timestamp);
create or replace function security_user_dq(alreadyauth_ text,  userid_ text, sessionid_ text ,securityUserId_ integer, lastUpdate_ timestamp  )
  returns boolean as
$body$
  declare
    
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_USER' );
    end if;
	delete from security_user where security_user_id=securityUserId_  and last_update = lastUpdate_;

	if found then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_USER- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_user_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_user_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  security_user_dqw(text, text, text)
-- DROP FUNCTION security_user_dqw( text,text,text);
create or replace function security_user_dqw(alreadyauth_ text,  userid_ text, sessionid_ text , whereClause_  text)
  returns boolean as
$body$
  declare
  rcnt integer;  
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid( userid_,sessionid_) ;
    	perform isuserauthorized(userid_,'DELETE_SECURITY_USER' );
    end if;
	execute  'delete from security_user ' ||  buildSQLClauses(whereClause_,'',0,0)  ;
	GET DIAGNOSTICS rcnt = ROW_COUNT;
	if rcnt>0 then
	  return true;
	else 
	  raise exception 'Delete Failed for SECURITY_USER- The record may have been changed or deleted before the attempt.';
	end if;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
CREATE FUNCTION
--alter function security_user_dq(text, text, text,integer, timestamp) owner to postgres;
--GRANT EXECUTE ON FUNCTION security_user_dq(text,  text, text,integer, timestamp) TO GROUP golfscore;
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
\i securitySchema/060_CreateProc_ChangePassword.sql
CREATE OR REPLACE FUNCTION change_password(alreadyauth_ text, securityuserid_ text, sessionid_ text, userIdForUpdate_ text, newPassword_ text)
  RETURNS boolean AS
$BODY$
  declare
  begin
    	--perform issessionvalid( securityuserid_,sessionid_) ;
    if securityuserid_ <> userIdForUpdate_ then
    	perform isuserauthorized( securityuserid_, 'CHANGE_OTHERS_PWD' );
    end if;
	update security_user set password_enc = md5(newPassword_), updated_by = securityuserid_	where user_id = userIdForUpdate_ ;

	if found then
	  return true;
	else 
	  raise exception 'Password Update Failed' ;
	end if;
  end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
CREATE FUNCTION
ALTER FUNCTION change_password(text, text, text, text, text)
  OWNER TO concordc_golfscoredev;
ALTER FUNCTION
\i securitySchema/070_CreateProc_PasswordReset.sql
begin;
BEGIN
CREATE OR REPLACE FUNCTION init_passwd_reset(checkauthdummyplaceholder text, userid_ text)
  RETURNS security_user AS
$BODY$
 Declare
  returnVal text;
  sessionId text;	
  securityUser security_user;
 Begin
 returnVal :='';
  sessionId := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer )
	|| to_hex(((random() * 1000)^3)::Integer )  || to_hex(((random() * 1000)^3)::Integer );
  update security_user 
  set pwd_reset_cd =sessionId  
  where user_id = userID_ ;
  if found then
    select *into securityUser from security_user where user_id = userID_ ;
  end if;
  return securityUser ;
 End;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
CREATE FUNCTION
CREATE OR REPLACE FUNCTION init_lostuname(checkauthdummyplaceholder text, emailaddr_ text)
  RETURNS security_user AS
$BODY$
 Declare
  returnVal text;
  sessionId text;
  uname text;
  securityUser security_user;
	
 Begin
   select user_id into uname from security_user where email_addr = emailaddr_;
   perform init_passwd_reset('',uname);
   select * into securityUser from security_user where user_id = uname;
   
   return securityUser;
  End;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;	
CREATE FUNCTION
	
	commit;
COMMIT
