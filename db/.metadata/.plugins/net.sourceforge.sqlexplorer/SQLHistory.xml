<?xml version="1.0" encoding="UTF-8"?>

<history>
  <element execution-count="1" last-execution-time="1324938134004" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE VIEW vw_user_grant AS SELECT su.user_id, su.client_id, sp.profile_name, spriv.priv_name FROM security_user su LEFT JOIN security_profile sp ON su.security_profile_id = sp.security_profile_id LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id LEFT JOIN security_privilege spriv ON spg.security_privilege_id = spriv.security_privilege_id</element>
  <element execution-count="1" last-execution-time="1324938129748" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE VIEW vw_profile_grant AS SELECT sp.security_profile_id, sp.profile_name, spriv.security_privilege_id, spriv.priv_name, spg.last_update FROM security_profile sp LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id LEFT JOIN security_privilege spriv ON spg.security_privilege_id = spriv.security_privilege_id</element>
  <element execution-count="1" last-execution-time="1324938117782" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE VIEW vw_profile_grant AS SELECT sp.client_id, sp.security_profile_id, sp.profile_name, spriv.security_privilege_id, spriv.priv_name, spg.last_update FROM security_profile sp LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id LEFT JOIN security_privilege spriv ON spg.security_privilege_id = spriv.security_privilege_id</element>
  <element execution-count="1" last-execution-time="1324938106797" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE VIEW vw_profile_grant AS SELECT sp.client_id, sp.security_profile_id, sp.profile_name, spriv.security_privilege_id, spriv.priv_name, spg.last_update FROM security_profile sp LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id LEFT JOIN security_privilege spriv ON s spg.security_privilege_id = spriv.security_privilege_id</element>
  <element execution-count="1" last-execution-time="1324938073331" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE VIEW vw_profile_grant AS SELECT sp.client_id, sp.security_profile_id, sp.profile_name, spriv.security_privilege_id, spriv.priv_name, spg.last_update FROM security_profile sp LEFT JOIN security_profile_grant spg ON sp.client_id = spg.client_id AND sp.security_profile_id = spg.security_profile_id LEFT JOIN security_privilege spriv ON spg.client_id = spriv.client_id AND spg.security_privilege_id = spriv.security_privilege_id</element>
  <element execution-count="1" last-execution-time="1324935553739" alias="SimpleDemo" user-name="golfscore">insert into security_profile_grant (security_privilege_id, security_profile_id)values(9,1)</element>
  <element execution-count="1" last-execution-time="1324935475844" alias="SimpleDemo" user-name="golfscore">select * from security_profile_grant</element>
  <element execution-count="1" last-execution-time="1324934054680" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_handicap_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text) returns setof golfer_summary as $BODY$ Declare result golfer_summary; golfers golfer; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER_HANDICAP' ); end if; for golfers in select * from golfer order by name loop select golfers.golfer_id, golfers.name, avg(golf_score) as avg_score, max(last_update) as last_date, min(last_update) as first_date into result from ( select golf_score, last_update from golf_score where golfer_id =golfers.golfer_id order by last_update desc limit 10) as temp1 ; return next result; end loop; return; end; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="2" last-execution-time="1324933977688" alias="SimpleDemo" user-name="golfscore">select * from security_privilege</element>
  <element execution-count="1" last-execution-time="1324933943478" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( security_privilege_id, priv_name, last_update, description) VALUES (9, 'SELECT_GOLFER_HANDICAP', now(), 'Allows users to select golfer handicaps')</element>
  <element execution-count="2" last-execution-time="1324931071247" alias="SimpleDemo" user-name="golfscore">drop function simpletest</element>
  <element execution-count="1" last-execution-time="1324931032895" alias="SimpleDemo" user-name="golfscore">create or replace function simpletest() returns setof golfer_summary as $BODY$ Declare result golfer_summary; Begin for result in select avg(golf_score) as avg_score, max(last_update) as last_date, min(last_update) as first_date from ( select golf_score, last_update from golf_score where golfer_id =1 order by last_update desc limit 10) as temp1 loop return next result; end loop; return; end; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324931020764" alias="SimpleDemo" user-name="golfscore">create or replace type golfer_summary as (golfer_id int, golf_score int, last_date timestamp, first_date timestamp)</element>
  <element execution-count="2" last-execution-time="1324931007870" alias="SimpleDemo" user-name="golfscore">create type golfer_summary as (golfer_id int, golf_score int, last_date timestamp, first_date timestamp)</element>
  <element execution-count="1" last-execution-time="1324930953283" alias="SimpleDemo" user-name="golfscore">create type golfer_summary as (golfer_id int, golf_score int, last_date timestamp, first_date, timestamp)</element>
  <element execution-count="1" last-execution-time="1324930784288" alias="SimpleDemo" user-name="golfscore">select * from simpletest()</element>
  <element execution-count="1" last-execution-time="1324930784268" alias="SimpleDemo" user-name="golfscore">create or replace function simpletest() returns setof Record as $BODY$ Declare result Record; Begin for result in select avg(golf_score) as avg_score, max(last_update) as last_date, min(last_update) as first_date from ( select golf_score, last_update from golf_score where golfer_id =1 order by last_update desc limit 10) as temp1 loop return next result; end loop; return; end; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324930758393" alias="SimpleDemo" user-name="golfscore">create or replace function simpletest() returns setof Record as $BODY$ Declare result Record; Begin for result in select avg(golf_score) as avg_score, max(last_update) as last_date, min(last_update) as first_date from ( select golf_score, last_update from golf_score where golfer_id =1 order by last_update desc limit 10) as temp1 return next result; end loop; return; end; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324930576301" alias="SimpleDemo" user-name="golfscore">create or replace function simpletest() returns setof Record as $BODY$ Declare Begin return next select avg(golf_score) as avg_score, max(last_update) as last_date, min(last_update) as first_date from ( select golf_score, last_update from golf_score where golfer_id =1 order by last_update desc limit 10) as temp1 end; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324930240667" alias="SimpleDemo" user-name="golfscore">select avg(golf_score) as avg_score, max(last_update) as last_date, min(last_update) as first_date from ( select golf_score, last_update from golf_score where golfer_id =1 order by last_update desc limit 10) as temp1</element>
  <element execution-count="2" last-execution-time="1324928374712" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_dq(text, text, text,integer, timestamp) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928374711" alias="SimpleDemo" user-name="golfscore">alter function golfer_dq(text, text, text,integer, timestamp) owner to postgres</element>
  <element execution-count="2" last-execution-time="1324928374700" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_dq(alreadyauth_ text, userid_ text, sessionid_ text ,golferId_ integer, lastUpdate_ timestamp ) returns boolean as $body$ declare begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( userid_,sessionid_) ; perform isuserauthorized(userid_,'DELETE_GOLFER' ); end if; delete from golfer where golfer_id=golferId_ and last_update = lastUpdate_; if found then return true; else raise exception 'Delete Failed for GOLFER- The record may have been changed or deleted before the attempt.'; end if; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="2" last-execution-time="1324928374688" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_uq(text, text, text ,integer,timestamp,character varying) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928374677" alias="SimpleDemo" user-name="golfscore">alter function golfer_uq(text, text, text ,integer,timestamp,character varying) owner to postgres</element>
  <element execution-count="2" last-execution-time="1324928374667" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_uq(alreadyauth_ text, securityuserid_ text, sessionid_ text , golferId_ integer, lastUpdate_ timestamp, name_ character varying) returns golfer as $body$ declare updatedrow golfer; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_, 'UPDATE_GOLFER' ); end if; update golfer set last_update = now() , name= name_ where golfer_id=golferId_ and last_update = lastUpdate_ returning * into updatedrow; if found then return updatedrow; else raise exception 'Update Failed for GOLFER- The record may have been changed or deleted before the attempt.'; end if; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="4" last-execution-time="1324928374655" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_iq(text, text, text ,character varying) TO GROUP golfscore</element>
  <element execution-count="4" last-execution-time="1324928374644" alias="SimpleDemo" user-name="golfscore">alter function golfer_iq(text, text, text ,character varying) owner to postgres</element>
  <element execution-count="3" last-execution-time="1324928374633" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,name_ character varying) returns golfer as $body$ declare newrow golfer; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_,'INSERT_GOLFER' ); end if; insert into golfer(last_update,name) values ( now(),name_) returning * into newrow; return newrow; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="2" last-execution-time="1324928374621" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_bypk(text, text, text,integer) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928374610" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION golfer_bypk(text, text, text,integer) OWNER TO postgres</element>
  <element execution-count="2" last-execution-time="1324928374599" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golfer_bypk(alreadyAuth_ text, securityuserid_ text, sessionid_ text ,golferId_ integer) RETURNS golfer AS $BODY$ Declare result golfer; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER' ); end if; --golfer_id, last_update, name select * into result from golfer where golfer_id=golferId_; return result; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="3" last-execution-time="1324928374588" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore</element>
  <element execution-count="3" last-execution-time="1324928374578" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION golfer_sq(text, text, text, text, text, integer, integer) OWNER TO postgres</element>
  <element execution-count="3" last-execution-time="1324928374546" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golfer_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer) RETURNS SETOF golfer AS $BODY$ Declare whereClause text; orderByClause text; offsetStatement text; limitStatement text; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER' ); end if; --golfer_id, last_update, name whereClause =''; orderByClause=''; offsetStatement =''; limitStatement =''; if rowOffset_ &gt;0 then offsetStatement =' offset ' || rowOffset_ ; end if; if rowLimit_ &gt;0 then limitStatement =' limit '||rowLimit_; end if; if whereClause_ &lt;&gt;'' then whereClause = trim(leading whereClause_); whereClause = regexp_replace(whereClause, '^(where|WHERE)',''); whereClause = ' where ' || whereClause; end if; if orderByClause_ &lt;&gt; '' then orderByClause = orderByClause_; end if; return query execute 'select * from golfer ' || whereClause || orderByclause || offsetStatement || limitStatement; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="2" last-execution-time="1324928360390" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golf_score_dq(text, text, text,character, timestamp) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928360389" alias="SimpleDemo" user-name="golfscore">alter function golf_score_dq(text, text, text,character, timestamp) owner to postgres</element>
  <element execution-count="2" last-execution-time="1324928360377" alias="SimpleDemo" user-name="golfscore">create or replace function golf_score_dq(alreadyauth_ text, userid_ text, sessionid_ text ,golfScoreId_ character, lastUpdate_ timestamp ) returns boolean as $body$ declare begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( userid_,sessionid_) ; perform isuserauthorized(userid_,'DELETE_GOLF_SCORE' ); end if; delete from golf_score where golf_score_id=golfScoreId_ and last_update = lastUpdate_; if found then return true; else raise exception 'Delete Failed for GOLF_SCORE- The record may have been changed or deleted before the attempt.'; end if; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="2" last-execution-time="1324928360366" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golf_score_uq(text, text, text ,character,timestamp,integer,integer) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928360355" alias="SimpleDemo" user-name="golfscore">alter function golf_score_uq(text, text, text ,character,timestamp,integer,integer) owner to postgres</element>
  <element execution-count="2" last-execution-time="1324928360345" alias="SimpleDemo" user-name="golfscore">create or replace function golf_score_uq(alreadyauth_ text, securityuserid_ text, sessionid_ text , golfScoreId_ character, lastUpdate_ timestamp, golfScore_ integer, golferId_ integer) returns golf_score as $body$ declare updatedrow golf_score; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_, 'UPDATE_GOLF_SCORE' ); end if; update golf_score set last_update = now() , golf_score= golfScore_ , golfer_id= golferId_ where golf_score_id=golfScoreId_ and last_update = lastUpdate_ returning * into updatedrow; if found then return updatedrow; else raise exception 'Update Failed for GOLF_SCORE- The record may have been changed or deleted before the attempt.'; end if; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="2" last-execution-time="1324928360333" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golf_score_iq(text, text, text ,character,integer,integer) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928360322" alias="SimpleDemo" user-name="golfscore">alter function golf_score_iq(text, text, text ,character,integer,integer) owner to postgres</element>
  <element execution-count="2" last-execution-time="1324928360311" alias="SimpleDemo" user-name="golfscore">create or replace function golf_score_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,golfScoreId_ character,golfScore_ integer,golferId_ integer) returns golf_score as $body$ declare newrow golf_score; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_,'INSERT_GOLF_SCORE' ); end if; insert into golf_score( golf_score_id,last_update,golf_score,golfer_id) values ( golfScoreId_, now(),golfScore_,golferId_) returning * into newrow; return newrow; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="2" last-execution-time="1324928360299" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golf_score_bypk(text, text, text,character) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324928360289" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION golf_score_bypk(text, text, text,character) OWNER TO postgres</element>
  <element execution-count="2" last-execution-time="1324928360277" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golf_score_bypk(alreadyAuth_ text, securityuserid_ text, sessionid_ text ,golfScoreId_ character) RETURNS golf_score AS $BODY$ Declare result golf_score; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLF_SCORE' ); end if; --golf_score_id, last_update, golf_score, golfer_id select * into result from golf_score where golf_score_id=golfScoreId_; return result; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="3" last-execution-time="1324928360266" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golf_score_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore</element>
  <element execution-count="3" last-execution-time="1324928360255" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION golf_score_sq(text, text, text, text, text, integer, integer) OWNER TO postgres</element>
  <element execution-count="3" last-execution-time="1324928360233" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golf_score_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer) RETURNS SETOF golf_score AS $BODY$ Declare whereClause text; orderByClause text; offsetStatement text; limitStatement text; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLF_SCORE' ); end if; --golf_score_id, last_update, golf_score, golfer_id whereClause =''; orderByClause=''; offsetStatement =''; limitStatement =''; if rowOffset_ &gt;0 then offsetStatement =' offset ' || rowOffset_ ; end if; if rowLimit_ &gt;0 then limitStatement =' limit '||rowLimit_; end if; if whereClause_ &lt;&gt;'' then whereClause = trim(leading whereClause_); whereClause = regexp_replace(whereClause, '^(where|WHERE)',''); whereClause = ' where ' || whereClause; end if; if orderByClause_ &lt;&gt; '' then orderByClause = orderByClause_; end if; return query execute 'select * from golf_score ' || whereClause || orderByclause || offsetStatement || limitStatement; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324928337545" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.golf_score ( golf_score_id SERIAL NOT NULL , last_update TIMESTAMP(3) WITHOUT TIME ZONE , golf_score INT4 , golfer_id INTEGER , PRIMARY KEY (golf_score_id) , CONSTRAINT FK_golf_score_1 FOREIGN KEY (golfer_id) REFERENCES public.golfer (golfer_id) ON DELETE RESTRICT ON UPDATE RESTRICT )</element>
  <element execution-count="2" last-execution-time="1324928337455" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.golfer ( golfer_id SERIAL NOT NULL , last_update TIMESTAMP(3) WITHOUT TIME ZONE , name VARCHAR(25) , PRIMARY KEY (golfer_id) )</element>
  <element execution-count="1" last-execution-time="1324928337421" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.golfer cascade</element>
  <element execution-count="1" last-execution-time="1324928337381" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.golf_score cascade</element>
  <element execution-count="2" last-execution-time="1324928323320" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.golf_score</element>
  <element execution-count="1" last-execution-time="1324927949494" alias="SimpleDemo" user-name="golfscore">select * from golf_score_iq('ALREADY_AUTH', 'test', 'test' , 'text' ,1 ,1 )</element>
  <element execution-count="1" last-execution-time="1324927916893" alias="SimpleDemo" user-name="golfscore">select * from golf_score_sq('ALREADY_AUTH', 'test', 'test', '','',-1,-1)</element>
  <element execution-count="1" last-execution-time="1324927900187" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 8)</element>
  <element execution-count="1" last-execution-time="1324927900177" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 7)</element>
  <element execution-count="1" last-execution-time="1324927900165" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 6)</element>
  <element execution-count="1" last-execution-time="1324927900117" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 5)</element>
  <element execution-count="1" last-execution-time="1324927848047" alias="SimpleDemo" user-name="golfscore">select * from security_privilege where priv_name in ('SELECT_GOLF_SCORE','INSERT_GOLF_SCORE','UPDATE_GOLF_SCORE','DELETE_GOLF_SCORE')</element>
  <element execution-count="1" last-execution-time="1324927844153" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ( 'DELETE_GOLF_SCORE', now(), 'Allows users to delete records from golf_score')</element>
  <element execution-count="1" last-execution-time="1324927844148" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ('UPDATE_GOLF_SCORE', now(), 'Allows users to update records in golf_score')</element>
  <element execution-count="1" last-execution-time="1324927844130" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ('INSERT_GOLF_SCORE', now(), 'Allows users to add records to golf_score')</element>
  <element execution-count="1" last-execution-time="1324927844057" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ( 'SELECT_GOLF_SCORE', now(), 'Allows users to select golf_score')</element>
  <element execution-count="1" last-execution-time="1324788851146" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION initsession( text, text, text, text) OWNER TO postgres</element>
  <element execution-count="1" last-execution-time="1324788851127" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION initsession( checkAuthDummyPlaceHolder text, userid_ text, sessionDummyPlaceHolder text,password_ text) RETURNS security_user AS $BODY$ Declare sessionId_ character varying; securityUser security_user; Begin sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ); update security_user set session_id =sessionId_ , session_expire_dt = now()+ '20 min' where user_id = userID_ and password_enc = md5(password_); if found then select * into securityUser from security_user where user_id = userID_; else securityUser.user_id :=''; securityUser.session_id=''; end if; return securityUser ; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324788816003" alias="SimpleDemo" user-name="golfscore">DROP FUNCTION initsession( text, text, text)</element>
  <element execution-count="1" last-execution-time="1324788804672" alias="SimpleDemo" user-name="golfscore">DROP FUNCTION initsession( text, text, text, text)</element>
  <element execution-count="2" last-execution-time="1324788682688" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION initsession( text, text, text) OWNER TO postgres</element>
  <element execution-count="1" last-execution-time="1324788682673" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION initsession( userid_ text, sessionDummyPlaceHolder text,password_ text) RETURNS security_user AS $BODY$ Declare sessionId_ character varying; securityUser security_user; Begin sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ); update security_user set session_id =sessionId_ , session_expire_dt = now()+ '20 min' where user_id = userID_ and password_enc = md5(password_); if found then select * into securityUser from security_user where user_id = userID_; else securityUser.user_id :=''; securityUser.session_id=''; end if; return securityUser ; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324788645824" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION initsession( userid_ text, sessionDummyPlaceHolder text,text,password_ text) RETURNS security_user AS $BODY$ Declare sessionId_ character varying; securityUser security_user; Begin sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ); update security_user set session_id =sessionId_ , session_expire_dt = now()+ '20 min' where user_id = userID_ and password_enc = md5(password_); if found then select * into securityUser from security_user where user_id = userID_; else securityUser.user_id :=''; securityUser.session_id=''; end if; return securityUser ; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324788579879" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION initsession( userid_ text, sessionid_,text,password_ text) RETURNS security_user AS $BODY$ Declare sessionId_ character varying; securityUser security_user; Begin sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ); update security_user set session_id =sessionId_ , session_expire_dt = now()+ '20 min' where user_id = userID_ and password_enc = md5(password_); if found then select * into securityUser from security_user where user_id = userID_; else securityUser.user_id :=''; securityUser.session_id=''; end if; return securityUser ; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324788504588" alias="SimpleDemo" user-name="golfscore">DROP FUNCTION initsession( text, text)</element>
  <element execution-count="1" last-execution-time="1324787769797" alias="SimpleDemo" user-name="golfscore">insert into security_user(user_id,last_update, password_enc, security_profile_id, active_yn) values('golfscore',now(), md5('golfscore'),1,'Y')</element>
  <element execution-count="2" last-execution-time="1324787634928" alias="SimpleDemo" user-name="golfscore">select * from security_user</element>
  <element execution-count="3" last-execution-time="1324787350040" alias="SimpleDemo" user-name="golfscore">select * from golfer_iq('ALREADY_AUTH', 'test', 'test' , 'text' )</element>
  <element execution-count="2" last-execution-time="1324787321424" alias="SimpleDemo" user-name="golfscore">select * from golfer_sq('ALREADY_AUTH', 'test', 'test', '','',-1,-1)</element>
  <element execution-count="1" last-execution-time="1324785910096" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,name_ character varying) returns golfer as $body$ declare newrow golfer; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_,'INSERT_GOLFER' ); end if; insert into golfer(client_id ,last_update,name) values (clientid_ , now(),name_) returning * into newrow; return newrow; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="1" last-execution-time="1324785722756" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golfer_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer) RETURNS SETOF golfer AS $BODY$ Declare additionalWhereClause text; orderByClause text; offsetStatement text; limitStatement text; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER' ); end if; --golfer_id, last_update, name additionalWhereClause =''; orderByClause=''; offsetStatement =''; limitStatement =''; if rowOffset_ &gt;0 then offsetStatement =' offset ' || rowOffset_ ; end if; if rowLimit_ &gt;0 then limitStatement =' limit '||rowLimit_; end if; if whereClause_ &lt;&gt;'' then whereClause = trim(leading whereClause_); whereClause = regexp_replace(whereClause, '^(where|WHERE)',''); whereClause = ' where ' || whereClause; end if; if orderByClause_ &lt;&gt; '' then orderByClause = orderByClause_; end if; return query execute 'select * from golfer ' || whereClause || orderByclause || offsetStatement || limitStatement; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324785698090" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 4)</element>
  <element execution-count="1" last-execution-time="1324785698079" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 3)</element>
  <element execution-count="1" last-execution-time="1324785698068" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 2)</element>
  <element execution-count="2" last-execution-time="1324785698053" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 1)</element>
  <element execution-count="1" last-execution-time="1324785675554" alias="SimpleDemo" user-name="golfscore">insert into security_profile(security_profile_id, profile_name, last_update) values(1,'default',now())</element>
  <element execution-count="1" last-execution-time="1324785610154" alias="SimpleDemo" user-name="golfscore">select * from security_profile</element>
  <element execution-count="1" last-execution-time="1324785236820" alias="SimpleDemo" user-name="golfscore">select * from security_privilege where priv_name in ('SELECT_GOLFER','INSERT_GOLFER','UPDATE_GOLFER','DELETE_GOLFER')</element>
  <element execution-count="1" last-execution-time="1324785231130" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ( 'DELETE_GOLFER', now(), 'Allows users to delete records from golfer')</element>
  <element execution-count="1" last-execution-time="1324785231119" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ('UPDATE_GOLFER', now(), 'Allows users to update records in golfer')</element>
  <element execution-count="1" last-execution-time="1324785231108" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ('INSERT_GOLFER', now(), 'Allows users to add records to golfer')</element>
  <element execution-count="1" last-execution-time="1324785231094" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ( 'SELECT_GOLFER', now(), 'Allows users to select golfer')</element>
  <element execution-count="1" last-execution-time="1324785222621" alias="SimpleDemo" user-name="golfscore">GRANT ALL ON TABLE golfer TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324784725289" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_profile_grant ( security_privilege_id INTEGER NOT NULL , security_profile_id INTEGER NOT NULL , last_update TIMESTAMP(3) WITH TIME ZONE , PRIMARY KEY (security_privilege_id, security_profile_id) , CONSTRAINT FK_security_profile_grant_2 FOREIGN KEY (security_profile_id) REFERENCES public.security_profile (security_profile_id) , CONSTRAINT fk_securityprofilegrant_securityprivilege FOREIGN KEY (security_privilege_id) REFERENCES public.security_privilege (security_privilege_id) )</element>
  <element execution-count="2" last-execution-time="1324784725166" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.user_public ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , last_name VARCHAR(25) , first_name VARCHAR(25) , middle_name VARCHAR(25) , office_address1 VARCHAR(25) , office_address2 VARCHAR(25) , office_city VARCHAR(25) , office_state CHAR(2) , office_zip CHAR(10) , title VARCHAR(25) , suffix VARCHAR(25) , office_phone CHAR(14) , fax CHAR(14) , office_cell CHAR(14) , comment TEXT , PRIMARY KEY (user_id) , CONSTRAINT FK_user_public_1 FOREIGN KEY (user_id) REFERENCES public.security_user (user_id) )</element>
  <element execution-count="2" last-execution-time="1324784725033" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.user_confidential ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , home_address1 VARCHAR(25) , home_address2 VARCHAR(25) , home_city VARCHAR(25) , home_state CHAR(2) , home_zip CHAR(10) , home_phone CHAR(14) , personal_cell CHAR(14) , emergency_contact_name1 VARCHAR(25) , emergency_contact_phone1 CHAR(14) , emergency_contact_name2 VARCHAR(25) , emergency_contact_phone2 CHAR(14) , start_date DATE , termination_date DATE , exempt_yn CHAR(1) , annual_salary FLOAT4 , hourly_bill_rate FLOAT4 , hourly_pay_rate FLOAT4 , comment TEXT , ssn_enc VARCHAR(25) , birth_date DATE , PRIMARY KEY (user_id) , CONSTRAINT FK_user_confidential_1 FOREIGN KEY (user_id) REFERENCES public.security_user (user_id) )</element>
  <element execution-count="1" last-execution-time="1324784724909" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_user ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , password_enc TEXT , security_profile_id INTEGER NOT NULL , session_id TEXT , session_expire_dt TIMESTAMP(3) , active_yn CHAR(1) , PRIMARY KEY (user_id) , CONSTRAINT FK_security_user_2 FOREIGN KEY (security_profile_id) REFERENCES public.security_profile (security_profile_id) )</element>
  <element execution-count="2" last-execution-time="1324784724797" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_profile ( security_profile_id SERIAL NOT NULL , profile_name TEXT , last_update TIMESTAMP(3) , PRIMARY KEY (security_profile_id) )</element>
  <element execution-count="2" last-execution-time="1324784724708" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_privilege ( security_privilege_id SERIAL NOT NULL , priv_name TEXT , description TEXT , last_update TIMESTAMP(3) , PRIMARY KEY (security_privilege_id) )</element>
  <element execution-count="1" last-execution-time="1324784724698" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.security_privilege cascade</element>
</history>