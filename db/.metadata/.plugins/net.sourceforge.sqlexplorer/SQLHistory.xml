<?xml version="1.0" encoding="UTF-8"?>

<history>
  <element execution-count="1" last-execution-time="1324787464738" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_dq(text, text, text,integer, timestamp) TO GROUP golfscore</element>
  <element execution-count="1" last-execution-time="1324787464727" alias="SimpleDemo" user-name="golfscore">alter function golfer_dq(text, text, text,integer, timestamp) owner to postgres</element>
  <element execution-count="1" last-execution-time="1324787464706" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_dq(alreadyauth_ text, userid_ text, sessionid_ text ,golferId_ integer, lastUpdate_ timestamp ) returns boolean as $body$ declare begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( userid_,sessionid_) ; perform isuserauthorized(userid_,'DELETE_GOLFER' ); end if; delete from golfer where golfer_id=golferId_ and last_update = lastUpdate_; if found then return true; else raise exception 'Delete Failed for GOLFER- The record may have been changed or deleted before the attempt.'; end if; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="1" last-execution-time="1324787411041" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_uq(text, text, text ,integer,timestamp,character varying) TO GROUP golfscore</element>
  <element execution-count="1" last-execution-time="1324787411030" alias="SimpleDemo" user-name="golfscore">alter function golfer_uq(text, text, text ,integer,timestamp,character varying) owner to postgres</element>
  <element execution-count="1" last-execution-time="1324787411007" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_uq(alreadyauth_ text, securityuserid_ text, sessionid_ text , golferId_ integer, lastUpdate_ timestamp, name_ character varying) returns golfer as $body$ declare updatedrow golfer; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_, 'UPDATE_GOLFER' ); end if; update golfer set last_update = now() , name= name_ where golfer_id=golferId_ and last_update = lastUpdate_ returning * into updatedrow; if found then return updatedrow; else raise exception 'Update Failed for GOLFER- The record may have been changed or deleted before the attempt.'; end if; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="3" last-execution-time="1324787350040" alias="SimpleDemo" user-name="golfscore">select * from golfer_iq('ALREADY_AUTH', 'test', 'test' , 'text' )</element>
  <element execution-count="3" last-execution-time="1324787343426" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_iq(text, text, text ,character varying) TO GROUP golfscore</element>
  <element execution-count="3" last-execution-time="1324787343424" alias="SimpleDemo" user-name="golfscore">alter function golfer_iq(text, text, text ,character varying) owner to postgres</element>
  <element execution-count="2" last-execution-time="1324787343406" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,name_ character varying) returns golfer as $body$ declare newrow golfer; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_,'INSERT_GOLFER' ); end if; insert into golfer(last_update,name) values ( now(),name_) returning * into newrow; return newrow; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="2" last-execution-time="1324787321424" alias="SimpleDemo" user-name="golfscore">select * from golfer_sq('ALREADY_AUTH', 'test', 'test', '','',-1,-1)</element>
  <element execution-count="2" last-execution-time="1324787316376" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_sq(text, text, text, text, text, integer, integer) TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324787316376" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION golfer_sq(text, text, text, text, text, integer, integer) OWNER TO postgres</element>
  <element execution-count="2" last-execution-time="1324787316353" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golfer_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer) RETURNS SETOF golfer AS $BODY$ Declare whereClause text; orderByClause text; offsetStatement text; limitStatement text; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER' ); end if; --golfer_id, last_update, name whereClause =''; orderByClause=''; offsetStatement =''; limitStatement =''; if rowOffset_ &gt;0 then offsetStatement =' offset ' || rowOffset_ ; end if; if rowLimit_ &gt;0 then limitStatement =' limit '||rowLimit_; end if; if whereClause_ &lt;&gt;'' then whereClause = trim(leading whereClause_); whereClause = regexp_replace(whereClause, '^(where|WHERE)',''); whereClause = ' where ' || whereClause; end if; if orderByClause_ &lt;&gt; '' then orderByClause = orderByClause_; end if; return query execute 'select * from golfer ' || whereClause || orderByclause || offsetStatement || limitStatement; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324785910096" alias="SimpleDemo" user-name="golfscore">create or replace function golfer_iq(alreadyauth_ text, securityuserid_ text, sessionid_ text,name_ character varying) returns golfer as $body$ declare newrow golfer; begin if alreadyauth_ &lt;&gt;'ALREADY_AUTH' then perform issessionvalid( securityuserid_,sessionid_) ; perform isuserauthorized( securityuserid_,'INSERT_GOLFER' ); end if; insert into golfer(client_id ,last_update,name) values (clientid_ , now(),name_) returning * into newrow; return newrow; end; $body$ language 'plpgsql' volatile cost 100</element>
  <element execution-count="1" last-execution-time="1324785895778" alias="SimpleDemo" user-name="golfscore">GRANT EXECUTE ON FUNCTION golfer_bypk(text, text, text,integer) TO GROUP golfscore</element>
  <element execution-count="1" last-execution-time="1324785895767" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION golfer_bypk(text, text, text,integer) OWNER TO postgres</element>
  <element execution-count="1" last-execution-time="1324785895743" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golfer_bypk(alreadyAuth_ text, securityuserid_ text, sessionid_ text ,golferId_ integer) RETURNS golfer AS $BODY$ Declare result golfer; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER' ); end if; --golfer_id, last_update, name select * into result from golfer where golfer_id=golferId_; return result; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324785722756" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION golfer_sq(alreadyAuth_ text, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer) RETURNS SETOF golfer AS $BODY$ Declare additionalWhereClause text; orderByClause text; offsetStatement text; limitStatement text; Begin if alreadyAuth_ &lt;&gt;'ALREADY_AUTH' then perform isSessionValid( securityuserId_,sessionId_) ; perform isUserAuthorized( securityuserId_, 'SELECT_GOLFER' ); end if; --golfer_id, last_update, name additionalWhereClause =''; orderByClause=''; offsetStatement =''; limitStatement =''; if rowOffset_ &gt;0 then offsetStatement =' offset ' || rowOffset_ ; end if; if rowLimit_ &gt;0 then limitStatement =' limit '||rowLimit_; end if; if whereClause_ &lt;&gt;'' then whereClause = trim(leading whereClause_); whereClause = regexp_replace(whereClause, '^(where|WHERE)',''); whereClause = ' where ' || whereClause; end if; if orderByClause_ &lt;&gt; '' then orderByClause = orderByClause_; end if; return query execute 'select * from golfer ' || whereClause || orderByclause || offsetStatement || limitStatement; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000</element>
  <element execution-count="1" last-execution-time="1324785698090" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 4)</element>
  <element execution-count="1" last-execution-time="1324785698079" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 3)</element>
  <element execution-count="1" last-execution-time="1324785698068" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 2)</element>
  <element execution-count="2" last-execution-time="1324785698053" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_profile_grant( security_profile_id, security_privilege_id) VALUES ( 1, 1)</element>
  <element execution-count="1" last-execution-time="1324785675554" alias="SimpleDemo" user-name="golfscore">insert into security_profile(security_profile_id, profile_name, last_update) values(1,'default',now())</element>
  <element execution-count="1" last-execution-time="1324785610154" alias="SimpleDemo" user-name="golfscore">select * from security_profile</element>
  <element execution-count="1" last-execution-time="1324785236820" alias="SimpleDemo" user-name="golfscore">select * from security_privilege where priv_name in ('SELECT_GOLFER','INSERT_GOLFER','UPDATE_GOLFER','DELETE_GOLFER')</element>
  <element execution-count="1" last-execution-time="1324785231130" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ( 'DELETE_GOLFER', now(), 'Allows users to delete records from golfer')</element>
  <element execution-count="1" last-execution-time="1324785231119" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ('UPDATE_GOLFER', now(), 'Allows users to update records in golfer')</element>
  <element execution-count="1" last-execution-time="1324785231108" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ('INSERT_GOLFER', now(), 'Allows users to add records to golfer')</element>
  <element execution-count="1" last-execution-time="1324785231094" alias="SimpleDemo" user-name="golfscore">INSERT INTO security_privilege( priv_name, last_update, description) VALUES ( 'SELECT_GOLFER', now(), 'Allows users to select golfer')</element>
  <element execution-count="1" last-execution-time="1324785222621" alias="SimpleDemo" user-name="golfscore">GRANT ALL ON TABLE golfer TO GROUP golfscore</element>
  <element execution-count="2" last-execution-time="1324784725289" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_profile_grant ( security_privilege_id INTEGER NOT NULL , security_profile_id INTEGER NOT NULL , last_update TIMESTAMP(3) WITH TIME ZONE , PRIMARY KEY (security_privilege_id, security_profile_id) , CONSTRAINT FK_security_profile_grant_2 FOREIGN KEY (security_profile_id) REFERENCES public.security_profile (security_profile_id) , CONSTRAINT fk_securityprofilegrant_securityprivilege FOREIGN KEY (security_privilege_id) REFERENCES public.security_privilege (security_privilege_id) )</element>
  <element execution-count="2" last-execution-time="1324784725166" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.user_public ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , last_name VARCHAR(25) , first_name VARCHAR(25) , middle_name VARCHAR(25) , office_address1 VARCHAR(25) , office_address2 VARCHAR(25) , office_city VARCHAR(25) , office_state CHAR(2) , office_zip CHAR(10) , title VARCHAR(25) , suffix VARCHAR(25) , office_phone CHAR(14) , fax CHAR(14) , office_cell CHAR(14) , comment TEXT , PRIMARY KEY (user_id) , CONSTRAINT FK_user_public_1 FOREIGN KEY (user_id) REFERENCES public.security_user (user_id) )</element>
  <element execution-count="2" last-execution-time="1324784725033" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.user_confidential ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , home_address1 VARCHAR(25) , home_address2 VARCHAR(25) , home_city VARCHAR(25) , home_state CHAR(2) , home_zip CHAR(10) , home_phone CHAR(14) , personal_cell CHAR(14) , emergency_contact_name1 VARCHAR(25) , emergency_contact_phone1 CHAR(14) , emergency_contact_name2 VARCHAR(25) , emergency_contact_phone2 CHAR(14) , start_date DATE , termination_date DATE , exempt_yn CHAR(1) , annual_salary FLOAT4 , hourly_bill_rate FLOAT4 , hourly_pay_rate FLOAT4 , comment TEXT , ssn_enc VARCHAR(25) , birth_date DATE , PRIMARY KEY (user_id) , CONSTRAINT FK_user_confidential_1 FOREIGN KEY (user_id) REFERENCES public.security_user (user_id) )</element>
  <element execution-count="1" last-execution-time="1324784724909" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_user ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , password_enc TEXT , security_profile_id INTEGER NOT NULL , session_id TEXT , session_expire_dt TIMESTAMP(3) , active_yn CHAR(1) , PRIMARY KEY (user_id) , CONSTRAINT FK_security_user_2 FOREIGN KEY (security_profile_id) REFERENCES public.security_profile (security_profile_id) )</element>
  <element execution-count="2" last-execution-time="1324784724797" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_profile ( security_profile_id SERIAL NOT NULL , profile_name TEXT , last_update TIMESTAMP(3) , PRIMARY KEY (security_profile_id) )</element>
  <element execution-count="2" last-execution-time="1324784724708" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_privilege ( security_privilege_id SERIAL NOT NULL , priv_name TEXT , description TEXT , last_update TIMESTAMP(3) , PRIMARY KEY (security_privilege_id) )</element>
  <element execution-count="1" last-execution-time="1324784724698" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.security_privilege cascade</element>
  <element execution-count="1" last-execution-time="1324784724686" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.security_profile cascade</element>
  <element execution-count="1" last-execution-time="1324784724663" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.security_user cascade</element>
  <element execution-count="2" last-execution-time="1324784712849" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.security_profile_grant cascade</element>
  <element execution-count="1" last-execution-time="1324784699538" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.user_public cascade</element>
  <element execution-count="1" last-execution-time="1324784655935" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.security_profile_grant</element>
  <element execution-count="2" last-execution-time="1324784589628" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.golf_score ( golf_score_id CHAR(10) NOT NULL , last_update TIMESTAMP(3) WITHOUT TIME ZONE , golf_score INT4 , golfer_id INTEGER , PRIMARY KEY (golf_score_id) , CONSTRAINT FK_golf_score_1 FOREIGN KEY (golfer_id) REFERENCES public.golfer (golfer_id) ON DELETE RESTRICT ON UPDATE RESTRICT )</element>
  <element execution-count="1" last-execution-time="1324784589562" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.golfer ( golfer_id SERIAL NOT NULL , last_update TIMESTAMP(3) WITHOUT TIME ZONE , name VARCHAR(25) , PRIMARY KEY (golfer_id) )</element>
  <element execution-count="1" last-execution-time="1324784589549" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.golfer</element>
  <element execution-count="1" last-execution-time="1324784589525" alias="SimpleDemo" user-name="golfscore">DROP TABLE public.golf_score</element>
  <element execution-count="1" last-execution-time="1324782219888" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.golfer ( golfer_id SERIAL NOT NULL , last_update TIMESTAMP(3) WITHOUT TIME ZONE , name CHAR(10) , PRIMARY KEY (golfer_id) )</element>
  <element execution-count="1" last-execution-time="1324781788449" alias="SimpleDemo" user-name="golfscore">GRANT ALL ON TABLE vw_profile_grant TO golfscore_grp</element>
  <element execution-count="1" last-execution-time="1324781788438" alias="SimpleDemo" user-name="golfscore">GRANT ALL ON TABLE vw_profile_grant TO golfscore</element>
  <element execution-count="1" last-execution-time="1324781788416" alias="SimpleDemo" user-name="golfscore">GRANT ALL ON TABLE vw_profile_grant TO postgres</element>
  <element execution-count="1" last-execution-time="1324781788404" alias="SimpleDemo" user-name="golfscore">ALTER TABLE vw_profile_grant OWNER TO postgres</element>
  <element execution-count="1" last-execution-time="1324781788381" alias="SimpleDemo" user-name="golfscore">Create or replace View vw_profile_grant as SELECT sp.security_profile_id, sp.profile_name, spriv.security_privilege_id, spriv.priv_name, spg.last_update FROM security_profile sp LEFT JOIN security_profile_grant spg ON sp.security_profile_id = spg.security_profile_id LEFT JOIN security_privilege spriv ON spg.security_privilege_id = spriv.security_privilege_id</element>
  <element execution-count="1" last-execution-time="1324781614266" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION isUserAuthorized( in userId_ text , in tran_ text ) RETURNS boolean AS $BODY$ Declare rowCount integer; Begin select count(*) into rowCount from vw_user_grant where user_id =userId_ and priv_name = tran_; if rowCount &lt;&gt; 1 then --raise exception 'ACCESS DENIED-- user is not authorized for this transaction'; return false; end if; return true; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE</element>
  <element execution-count="1" last-execution-time="1324781489179" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION isSessionValid( in userId_ text , in sessionId_ text ) RETURNS text AS $BODY$ Declare Begin update security_user set session_expire_dt = now() + '20 min' where user_id = userID_ and session_id = sessionId_; if found then return 'Valid Session' ; else return 'Session Invalid -- Access Denied'; end if; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE</element>
  <element execution-count="2" last-execution-time="1324780965134" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION initsession( text, text) OWNER TO postgres</element>
  <element execution-count="3" last-execution-time="1324780965123" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION initsession( userid_ text, password_ text) RETURNS security_user AS $BODY$ Declare sessionId_ character varying; securityUser security_user; Begin sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ); update security_user set session_id =sessionId_ , session_expire_dt = now()+ '20 min' where user_id = userID_ and password_enc = md5(password_); if found then select * into securityUser from security_user where user_id = userID_; else securityUser.user_id :=''; securityUser.session_id=''; end if; return securityUser ; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324780870470" alias="SimpleDemo" user-name="golfscore">ALTER FUNCTION initsession(integer, text, text) OWNER TO postgres</element>
  <element execution-count="2" last-execution-time="1324780478025" alias="SimpleDemo" user-name="golfscore">CREATE OR REPLACE FUNCTION initsession( userid_ text, password_ text) RETURNS security_user AS $BODY$ Declare sessionId_ character varying; securityUser security_user; Begin sessionId_ := to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ) || to_hex(((random() * 1000)^3)::Integer ); update security_user set session_id =sessionId_ , session_expire_dt = now()+ '20 min' where user_id = userID_ and password_enc = md5(password_); if found then select * into securityUser from security_user where user_id = userID_; return securityUser ; else return false; end if; End; $BODY$ LANGUAGE 'plpgsql' VOLATILE COST 100</element>
  <element execution-count="1" last-execution-time="1324780471756" alias="SimpleDemo" user-name="golfscore">CREATE TABLE public.security_user ( user_id TEXT NOT NULL , last_update TIMESTAMP(3) , password_enc TEXT , security_profile_id INTEGER NOT NULL , session_id TEXT , session_expire_dt TIMESTAMP , active_yn CHAR(1) , PRIMARY KEY (user_id) , CONSTRAINT FK_security_user_2 FOREIGN KEY (security_profile_id) REFERENCES public.security_profile (security_profile_id) )</element>
</history>