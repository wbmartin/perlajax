[%- FOREACH tablename IN tbl.keys -%]
[%- FILTER redirect("html/_${tablename}.html") -%]
\o ./log/CRUD_[%+tablename+%].log
/*
-- Security Grants
GRANT ALL ON TABLE [%+tablename+%] TO GROUP [%+ props.dbgroup -%];
INSERT INTO security_privilege(client_id,  priv_name, last_update, description)    VALUES (1, 'SELECT_[%+tablename | upper+%]', now(), 'Allows users to select [%+tablename+%]'); 
INSERT INTO security_privilege(client_id,  priv_name, last_update, description)    VALUES (1, 'INSERT_[%+tablename | upper+%]', now(), 'Allows users to add records to [%+tablename+%]');
INSERT INTO security_privilege(client_id,  priv_name, last_update, description)    VALUES (1, 'UPDATE_[%+tablename | upper+%]', now(), 'Allows users to update records in [%+tablename+%]');
INSERT INTO security_privilege(client_id,  priv_name, last_update, description)    VALUES (1, 'DELETE_[%+tablename | upper+%]', now(), 'Allows users to delete records from [%+tablename+%]');
select * from security_privilege where priv_name in ('SELECT_[%+tablename | upper+%]','INSERT_[%+tablename | upper+%]','UPDATE_[%+tablename | upper+%]','DELETE_[%+tablename | upper+%]');
INSERT INTO security_profile_grant(client_id, security_profile_id, security_privilege_id) VALUES (1, 1, ?);
INSERT INTO security_profile_grant(client_id, security_profile_id, security_privilege_id) VALUES (1, 1, ?);
INSERT INTO security_profile_grant(client_id, security_profile_id, security_privilege_id) VALUES (1, 1, ?);
INSERT INTO security_profile_grant(client_id, security_profile_id, security_privilege_id) VALUES (1, 1, ?);
*/
--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

[%BLOCK COMMA_COLUMNS%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[% ", "  IF loop.count()>1; column %]
[%-END+%]
[%END #BLOCK %]
-- Function: [%+tablename+%]_sq(text, integer, text, text, text, text, integer, integer)

-- DROP FUNCTION [%+tablename+%]_sq(text, integer, text, text, text, text, integer, integer);

CREATE OR REPLACE FUNCTION [%+tablename+%]_sq(alreadyAuth_ text, clientid_ integer, securityuserid_ text, sessionid_ text, whereClause_ text, orderByClause_ text, rowLimit_ integer, rowOffset_ integer)
  RETURNS SETOF [%+tablename+%] AS
$BODY$
  Declare
    additionalWhereClause text;
    orderByClause text;
    offsetStatement text;
    limitStatement text;
  Begin
    if alreadyAuth_ <>'ALREADY_AUTH' then
    	perform isSessionValid(clientid_, securityuserId_,sessionId_) ;
    	perform isUserAuthorized(clientid_, securityuserId_, 'SELECT_[%+tablename | upper+%]' );
    end if;
--[%- INCLUDE COMMA_COLUMNS+%]
    additionalWhereClause ='';
    orderByClause='';
    offsetStatement ='';
    limitStatement ='';
    if rowOffset_ >0 then
	offsetStatement =' offset ' || rowOffset_ ;
    end if;
    if rowLimit_ >0 then
	limitStatement =' limit '||rowLimit_;
    end if;
    if whereClause_ <>'' then
	additionalWhereClause = trim(leading whereClause_);
	additionalWhereClause = regexp_replace(additionalWhereClause, '^(where|WHERE)','');
	additionalWhereClause = trim(leading additionalWhereClause);
	additionalWhereClause = regexp_replace(additionalWhereClause, '^(and|AND)','');
	additionalWhereClause = ' and( ' || additionalWhereClause || ')';
    end if;
    if orderByClause_ <> '' then
	orderByClause = orderByClause_;
    end if;

    return query execute 'select * from [%+tablename+%] where client_id =' || clientid_ || ' ' 
	|| additionalWhereClause || orderByclause || offsetStatement || limitStatement;

  End;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION [%+tablename+%]_sq(text, integer, text, text, text, text, integer, integer) OWNER TO postgres;
GRANT EXECUTE ON FUNCTION [%+tablename+%]_sq(text, integer, text, text, text, text, integer, integer) TO GROUP [%+ props.dbgroup -%];

--select * from [%+tablename+%]_sq('ALREADY_AUTH', 1, 'test', 'test', '','',-1,-1);


--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
[%BLOCK BYPK_OMIT_NAMES%]
[%- FOREACH pk IN tbl.$tablename.prkeys -%]
[% IF pk=="client_id"; ELSIF tbl.$tablename.columns.$pk.auto_inc == "Y";",integer";  ELSE; "," ; tbl.$tablename.columns.$pk.data_type; END%]
[%-END #foreach-%]
[%END #BLOCK %]

[%-BLOCK BYPK_SHOW_NAMES-%]
[%- FOREACH pk IN tbl.$tablename.prkeys -%]
[% IF pk=="client_id"; ELSIF tbl.$tablename.columns.$pk.auto_inc == "Y";","; tbl.$tablename.columns.$pk.java_name ;"_ integer";  ELSE; "," ;tbl.$tablename.columns.$pk.java_name; "_ "; tbl.$tablename.columns.$pk.data_type; END%]
[%-END#foreach-%]
[%-END #BLOCK -%]

[%-BLOCK PRKEY_WHERE_CLAUSE-%]
 [%- FOREACH pk IN tbl.$tablename.prkeys -%]
[%-" and "  IF loop.count()>1; pk; "="; tbl.$tablename.columns.$pk.java_name;  -%]_
[%-END #foreach-%]
[%-END #BLOCK -%]

-- Function: [%+tablename+%]_bypk(text, integer, text, text [%INCLUDE BYPK_OMIT_NAMES%])

-- DROP FUNCTION [%+tablename+%]_pybk(text, integer, text, text[%INCLUDE BYPK_OMIT_NAMES%]);

CREATE OR REPLACE FUNCTION [%+tablename+%]_bypk(alreadyAuth_ text, clientid_ integer, securityuserid_ text, sessionid_ text 
[%- INCLUDE BYPK_SHOW_NAMES -%])
  RETURNS [%+tablename+%] AS
$BODY$
  Declare
    result [%+tablename+%];
  Begin
    if alreadyAuth_ <>'ALREADY_AUTH' then
    	perform isSessionValid(clientid_, securityuserId_,sessionId_) ;
    	perform isUserAuthorized(clientid_, securityuserId_, 'SELECT_[%+tablename | upper+%]' );
    end if;
--[%-INCLUDE COMMA_COLUMNS-%] 
   


     select * into result from [%+tablename+%] where [%+INCLUDE PRKEY_WHERE_CLAUSE +%];
     return result;
  End;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
ALTER FUNCTION [%+tablename+%]_bypk(text, integer, text, text[%INCLUDE BYPK_OMIT_NAMES%]) OWNER TO postgres;
GRANT EXECUTE ON FUNCTION [%+tablename+%]_bypk(text, integer, text, text[%INCLUDE BYPK_OMIT_NAMES%]) TO GROUP [%+ props.dbgroup -%];


--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
[%-BLOCK IQ_FUNC_OMIT_COLUMN_NAMES%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%   IF tbl.$tablename.columns.$column.auto_inc != "Y" && column != "client_id" && column !="last_update"; ",";tbl.$tablename.columns.$column.data_type; END %]
[%-END #FOREACH-%]
[%-END #BLOCK -%]


[%-BLOCK IQ_FUNC_SHOW_COLUMN_NAMES-%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%   IF tbl.$tablename.columns.$column.auto_inc != "Y" && column != "client_id" && column !="last_update"; ",";tbl.$tablename.columns.$column.java_name;"_ ";tbl.$tablename.columns.$column.data_type; END %]
[%-END#foreach+%]
[%-END #BLOCK -%]



-- Function:  [%+tablename+%]_iq(text, integer, text [%-INCLUDE IQ_FUNC_OMIT_COLUMN_NAMES-%])

-- DROP FUNCTION [%+tablename+%]_iq( text, integer, text[%-INCLUDE IQ_FUNC_OMIT_COLUMN_NAMES-%]);

create or replace function [%+tablename+%]_iq(alreadyauth_ text, clientid_ integer, securityuserid_ text, sessionid_ text[%-INCLUDE IQ_FUNC_SHOW_COLUMN_NAMES-%])
  returns [%+tablename+%] as
$body$
  declare
    newrow [%+tablename+%];
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid(clientid_, securityuserid_,sessionid_) ;
    	perform isuserauthorized(clientid_, securityuserid_,'INSERT_[%+tablename | upper+%]' );
    end if;


    insert into [%+tablename+%](client_id 
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%   IF tbl.$tablename.columns.$column.auto_inc != "Y" && column != "client_id" ; ",";column; END -%]
[%-END #FOREACH-%]
) 
	values (clientid_ 
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%   IF tbl.$tablename.columns.$column.auto_inc == "Y" || column == "client_id" ; -%] 
[%ELSIF column == "last_update";", now()";ELSE; ",";tbl.$tablename.columns.$column.java_name;"_"; -%]
[%- END #IF-%]
[%-END #FOREACH - %]) 
	returning * into newrow;
      return newrow;
  end;
$body$
  language 'plpgsql' volatile
  cost 100;
alter function [%+tablename+%]_iq(text, integer, text, text [%-INCLUDE IQ_FUNC_OMIT_COLUMN_NAMES-%]) owner to postgres;
GRANT EXECUTE ON FUNCTION [%+tablename+%]_iq(text, integer, text, text [%-INCLUDE IQ_FUNC_OMIT_COLUMN_NAMES-%]) TO GROUP [%+ props.dbgroup -%];

[%-BLOCK IQ_DUMMY_DATA-%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%- IF tbl.$tablename.columns.$column.auto_inc == "Y" || column == "client_id" || column =="last_update"; -%]
[%-ELSIF tbl.$tablename.columns.$column.data_type == "integer" || tbl.$tablename.columns.$column.data_type == "float" -%] ,1
[%-ELSIF tbl.$tablename.columns.$column.data_type == "java.util.Date"-%], now()
[%-ELSIF tbl.$tablename.columns.$column.data_type == "bool"-%], true
[%-ELSIF tbl.$tablename.columns.$column.data_type == "bpchar" -%], 't'
[%-ELSE  -%], 'text'
[%- END #IF-%]
[%-END #FOREACH-%]
[%-END #DUMMYDATA-%]



--select * from [%+tablename+%]_iq('ALREADY_AUTH', 1, 'test', 'test' [%INCLUDE IQ_DUMMY_DATA%] );


--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
[%-BLOCK UQ_FUNC_OMIT_COLUMN_NAMES%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%-  IF  column != "client_id" ; ",";tbl.$tablename.columns.$column.data_type; -%]
[%END #IF-%]
[%-END #FOREACH-%]
[%-END #BLOCK -%]


[%-BLOCK UQ_FUNC_SHOW_COLUMN_NAMES-%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%- IF column != "client_id" +%], [%+tbl.$tablename.columns.$column.java_name%]_ [%tbl.$tablename.columns.$column.data_type; -%]
[%END #IF-%]
[%-END #FOREACH-%]
[%-END #BLOCK -%]


-- Function:  [%+tablename+%]_uq(text, integer, text [%-INCLUDE UQ_FUNC_OMIT_COLUMN_NAMES-%])

-- DROP FUNCTION [%+tablename+%]_uq( text, integer, text [%-INCLUDE UQ_FUNC_OMIT_COLUMN_NAMES-%]);


create or replace function [%+tablename+%]_uq(alreadyauth_ text, clientid_ integer, securityuserid_ text, sessionid_ text [%-INCLUDE UQ_FUNC_SHOW_COLUMN_NAMES-%])
  returns [%+tablename+%] as
$body$
  declare
    updatedrow [%+tablename+%];
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid(clientid_, securityuserid_,sessionid_) ;
    	perform isuserauthorized(clientid_, securityuserid_, 'UPDATE_[%+tablename | upper+%]' );
    end if;
	update [%+tablename+%] set
[%- colCount=0 -%]
[%- FOREACH column IN tbl.$tablename.col_ord_pos -%]
[%-  IF tbl.$tablename.columns.$column.auto_inc == "Y" || tbl.$tablename.columns.$column.prkey =="Y"-%]
[%-ELSIF column == "last_update"; IF colCount>0;", ";END; +%] last_update = now() [%- SET colCount=colCount+1 -%]
[%-ELSE;  IF colCount>0;", ";END; -%] [%+ column -%]= [%- tbl.$tablename.columns.$column.java_name -%]_ [%- SET colCount=colCount+1 -%]
[%-END #IF -%]
[%-END #FOREACH -%]
	where [%-INCLUDE PRKEY_WHERE_CLAUSE-%]   and   last_update = lastUpdate_
	returning * into updatedrow;

	if found then
	  return updatedrow;
	else 
	  raise exception 'Update Failed for [%+tablename | upper+%]- The record may have been changed or deleted before the attempt.';
	end if;

  end;
$body$
  language 'plpgsql' volatile
  cost 100;
alter function [%+tablename+%]_uq(text, integer, text, text [%-INCLUDE UQ_FUNC_OMIT_COLUMN_NAMES-%]) owner to postgres;
GRANT EXECUTE ON FUNCTION [%+tablename+%]_uq(text, integer, text, text [%-INCLUDE UQ_FUNC_OMIT_COLUMN_NAMES-%]) TO GROUP [%+ props.dbgroup -%];


[%-BLOCK UQ_DUMMY_DATA-%]
[%- FOREACH column IN tbl.$tablename.columns.keys;  -%]
[%- IF  column == "client_id"  ; -%]
[%-ELSIF tbl.$tablename.columns.$column.auto_inc == "Y"-%] <[%column%]>
[%-ELSIF column =="last_update"-%] <last_update>
[%-ELSIF tbl.$tablename.columns.$column.data_type == "integer" || tbl.$tablename.columns.$column.data_type == "float" -%] ,1
[%-ELSIF tbl.$tablename.columns.$column.data_type == "java.util.Date"-%], now()
[%-ELSIF tbl.$tablename.columns.$column.data_type == "bool"-%], true
[%-ELSIF tbl.$tablename.columns.$column.data_type == "bpchar" -%], 't'
[%-ELSE  -%], 'text'
[%- END #IF-%]
[%-END #FOREACH-%]
[%-END #DUMMYDATA-%]
--select * from [%+tablename +%]_uq('ALREADY_AUTH', 1, 'test', 'test'[%- INCLUDE UQ_DUMMY_DATA +%]);


--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
-- Function:  [%+tablename+%]_dq(text, integer, text [%INCLUDE BYPK_OMIT_NAMES%], timestamp)

-- DROP FUNCTION [%+tablename+%]_dq( text, integer, text [%INCLUDE BYPK_OMIT_NAMES%], timestamp);


create or replace function [%+tablename+%]_dq(alreadyauth_ text, clientid_ integer, userid_ text, sessionid_ text [%INCLUDE BYPK_SHOW_NAMES%], lastUpdate_ timestamp  )
  returns boolean as
$body$
  declare
    
  begin
    if alreadyauth_ <>'ALREADY_AUTH' then	
    	perform issessionvalid(clientid_, userid_,sessionid_) ;
    	perform isuserauthorized(clientid_,userid_,'DELETE_[%+tablename | upper+%]' );
    end if;
	delete from [%+tablename+%] where [%-INCLUDE PRKEY_WHERE_CLAUSE-%]  and last_update = lastUpdate_;

	if found then
	  return true;
	else 
	  raise exception 'Delete Failed for [%+tablename | upper+%]- The record may have been changed or deleted before the attempt.';
	end if;

  end;
$body$
  language 'plpgsql' volatile
  cost 100;
alter function [%+tablename+%]_dq(text, integer, text, text[%INCLUDE BYPK_OMIT_NAMES%], timestamp) owner to postgres;
GRANT EXECUTE ON FUNCTION [%+tablename+%]_dq(text, integer, text, text[%INCLUDE BYPK_OMIT_NAMES%], timestamp) TO GROUP [%+ props.dbgroup -%];

--=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

[%- END #Foreach table -%]
[%- END #filter -%]
